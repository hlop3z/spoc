{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>SPOC is a foundational framework designed to create dynamic and adaptable <code>frameworks</code>. It involves defining a schema for your project(s) and building upon that schema to create a flexible and powerful Application.</p> <p>     (S)ingle \u2014      (P)oint \u2014      (O)f \u2014      (C)onnections </p> python -m pip install spocSuccessfully installed spoc!"},{"location":"#spoc-connections","title":"SPOC Connections","text":"<pre><code>flowchart RL;\n    subgraph Project\n    D;\n    E;\n    F;\n    end\n    subgraph Configurations\n    B;\n    C;\n    end\n    A &lt;--&gt; Configurations;\n    Project --&gt; A;\n    Configurations --&gt; Project;\n    A{SPOC};\n    B[Settings];\n    C[Environment Variables];\n    D[Applications];\n    E[Components];\n    F[Plugins];</code></pre>"},{"location":"#spoc-workflow","title":"SPOC Workflow","text":"<pre><code>sequenceDiagram\nautonumber\n    Spoc --&gt;&gt; Framework: Create a Framework\n    Note over Spoc,Framework: Step 1: Establish the Framework\n\n    Framework --&gt;&gt; Framework: Define Components\n    Note over Framework,Framework: Step 2: Handle the Components\n\n    Framework --&gt;&gt; Application: Use Components\n    Note over Framework,Application: Step 3: Extend Application\n\n    Application --&gt;&gt; Spoc: Register the Application(s)\n    Note over Spoc,Application: Step 5 to 8: Initialize the Framework\n\n    Spoc -) Application: Load Settings\n    Spoc -) Application: Load Environment Variables\n    Spoc -) Application: Load Plugins\n    Spoc -) Application: Load Installed Apps &amp; Components\n\n    Note over Application: Final Step: Utilize the Application(s)</code></pre>"},{"location":"#explanation","title":"Explanation","text":"<ul> <li> <p>(1) Create a Framework Using SPOC: Start by using SPOC to define the structure of your framework. This involves setting up the initial framework architecture.</p> </li> <li> <p>(2) Handle Components within the Framework: Organize and manage the various components that make up your framework. These components are the building blocks that define the functionality of your framework.</p> </li> <li> <p>(3) Extend the Application Using Framework Components: Incorporate the framework's components into your application. This step involves integrating these components to enhance and extend the capabilities of your application.</p> </li> <li> <p>(4) Register Applications with the Framework and SPOC: Connect your applications to the framework, thereby registering them with SPOC. This registration process ensures that all applications are aware of the framework's components and configurations.</p> </li> <li> <p>(5 - 8) Load All Necessary Elements: Sequentially load all required settings, environment variables, plugins, installed apps and components into the framework. This step ensures that all elements are properly initialized and ready for use.</p> </li> <li> <p>(Final) Utilize Your Fully Loaded Applications: Once everything is loaded, you can effectively use your applications. This final step allows you to leverage all loaded components, plugins, settings, and environment variables to operate your applications smoothly within the framework.</p> </li> </ul>"},{"location":"#key-features-of-spoc","title":"Key Features of SPOC","text":"<ul> <li>Loading Configurations</li> <li>Loading Plugins</li> <li>Collecting Components</li> </ul>"},{"location":"#loading-plugin-objects","title":"Loading Plugin <code>Objects</code>","text":"<p>To integrate Plugins, specify them under a dedicated <code>attribute</code> in your configuration files. This allows you to manage middleware and other plugin types effectively.</p> <p>Configuration Example (<code>TOML</code>):</p> config/spoc.toml<pre><code>...\n[spoc.plugins]\nmiddleware = [\"demo.middleware.MyClass\"] # (1)\nbefore_server = [\"demo.middleware.before_server_function\"] # (2)\n...\n</code></pre> <ol> <li><code>middleware</code>: List of middleware classes to be used.</li> <li><code>before_server</code>: List of functions to be executed before the server starts.</li> </ol> <p>Configuration Example (<code>Python</code>):</p> config/settings.py<pre><code>...\nPLUGINS: dict = {\n    \"middleware\": [\"demo.middleware.MyClass\"], # (1)\n    \"before_server\": [\"demo.middleware.before_server_function\"], # (2)\n}\n...\n</code></pre> <ol> <li><code>middleware</code>: Extra of type middleware.</li> <li><code>before_server</code>: Extra of type before_server.</li> </ol>"},{"location":"#collecting-component-objects","title":"Collecting Component <code>Objects</code>","text":"<p>SPOC facilitates the collection of specific <code>Objects</code> through the use of a <code>@component</code> decorator or by subclassing <code>Component</code>.</p> <p>Usage Example:</p> example.py<pre><code>@component\ndef hello_world():\n    print(\"Hello World\")\n\nclass HelloWorld(Component):\n    \"\"\"A subclass of Component\"\"\"\n</code></pre> <ul> <li><code>@component</code> decorator: Registers the function or class as a component.</li> <li><code>Component</code> subclass: Inherits from a <code>Base</code> to be recognized as a component.</li> </ul>"},{"location":"constants/","title":"Constant Variables","text":"<p>The following variables are configured within the <code>spoc.settings</code> module and can be used to control various aspects of your application's behavior.</p> <pre><code>from spoc import settings\n</code></pre>"},{"location":"constants/#constants","title":"Constants","text":"<ul> <li><code>BASE_DIR</code></li> <li><code>DEBUG</code></li> <li><code>MODE</code></li> <li><code>SPOC</code></li> <li><code>ENV</code></li> <li><code>CONFIG</code></li> </ul> <p>These variables provide a centralized way to manage your application's settings, making it easy to adapt to different environments or configurations.</p>"},{"location":"constants/#base_dir","title":"<code>BASE_DIR</code>","text":"<p>Description: Represents the base directory of your project. This is often used as a reference point for constructing paths to other directories and files within the project.</p> <pre><code>from spoc import settings\n\nSOME_PATH = settings.BASE_DIR / \"some-path\"\n</code></pre>"},{"location":"constants/#debug","title":"<code>DEBUG</code>","text":"<p>Description: A boolean variable that indicates whether the application is running in debug mode. This is typically used to enable more verbose logging or debugging features during development.</p> <pre><code>from spoc import settings\n\nif settings.DEBUG:\n    print(\"Debug Enabled\")\nelse:\n    print(\"Debug Disabled\")\n</code></pre>"},{"location":"constants/#mode","title":"<code>MODE</code>","text":"<p>Description: Defines the current operational mode of the application (e.g., <code>production</code>, <code>staging</code>, <code>development</code>). This is useful for enabling or disabling features based on the environment in which the application is running.</p> <pre><code>from spoc import settings\n\nmatch settings.MODE:\n    case \"production\":\n        print(\"Production Mode\")\n    case \"staging\":\n        print(\"Staging Mode\")\n    case \"development\":\n        print(\"Development Mode\")\n</code></pre>"},{"location":"constants/#spoc","title":"<code>SPOC</code>","text":"<p>Description: A dictionary-like object containing specific configuration settings for your application. This can be used to store and retrieve custom configuration values, such as feature flags or integration settings.</p> <pre><code>from spoc import settings\n\nuse_authentication = settings.SPOC.get(\"mode\")\n</code></pre>"},{"location":"constants/#env","title":"<code>ENV</code>","text":"<p>Description: A dictionary containing environment-specific variables. This is often used to retrieve sensitive information such as API keys or environment variables required for the application to function.</p> <pre><code>from spoc import settings\n\nprint(settings.ENV[\"my-variable-name\"])\n</code></pre> <p>Here\u2019s an improved version of your text:</p>"},{"location":"constants/#config","title":"<code>CONFIG</code>","text":"<p>Description: A dictionary that contains all the <code>TOML</code> configurations loaded into the framework. This includes configurations from both the <code>spoc</code> and <code>pyproject</code> files. Use <code>CONFIG</code> to access deeper sections of your <code>TOML</code> configuration files easily.</p> <p>Example:</p> <pre><code>from spoc import settings\n\nprint(settings.CONFIG)\n</code></pre>"},{"location":"api/framework/","title":"API Documentation","text":""},{"location":"api/framework/#module","title":"Module","text":""},{"location":"api/framework/#spoc","title":"<code>spoc</code>","text":""},{"location":"api/framework/#spoc--elastic-frameworks","title":"Elastic Frameworks","text":"<p>SPOC is a foundational framework designed to create dynamic and adaptable frameworks. It involves defining a schema for your project(s) and building upon that schema to create a flexible and powerful Application.</p> <p>This module provides an example of how to create a framework by extending the <code>spoc.Base</code> class. It demonstrates the initialization process using <code>spoc.init</code> with a list of modules, and shows how to access and manage various components and plugins within the framework.</p>"},{"location":"api/framework/#spoc--example","title":"Example","text":"<p>To create a custom framework, extend the <code>spoc.Base</code> class and initialize it using <code>spoc.init</code> with a list of desired modules:</p> <pre><code>from typing import Any\nimport spoc\n\nMODULES = [\"models\", \"views\"]\n\nclass MyFramework(spoc.Base):\n    components: Any\n    plugins: Any\n\n    def init(self):\n        # __init__ Replacement\n        app = spoc.init(MODULES)\n\n        # Assign components and plugins from the initialized app\n        self.components = app.components\n        self.plugins = app.plugins\n\n    @staticmethod\n    def keys():\n        # Define a list of keys relevant to the framework\n        return (\"components\", \"plugins\")\n</code></pre>"},{"location":"api/framework/#framework-tools","title":"Framework Tools","text":""},{"location":"api/framework/#spoc.Base","title":"<code>spoc.Base</code>","text":"<p>A Singleton representing the entire <code>class</code>. Ensuring a single global point of access.</p>"},{"location":"api/framework/#spoc.init","title":"<code>spoc.init(modules=None)</code>","text":"<p>Initialize the framework by collecting installed <code>apps</code> and <code>plugins</code>.</p> <p>Parameters:</p> <ul> <li> <code>modules</code>               (<code>list | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of modules (<code>files</code>) to initialize within the framework.</p> </li> </ul> <p>Example:</p> <pre><code>spoc.init([\"models\", \"views\"]) # will collect from `models.py` and `views.py`\n</code></pre>"},{"location":"api/framework/#spoc.start_project","title":"<code>spoc.start_project(settings_text=SETTINGS_TEXT, spoc_text=SPOC_TEXT, env_text=ENV_TEXT)</code>","text":"<p>Creates the core configuration files and directories for a project.</p> <p>This function sets up the initial directory structure and creates the necessary configuration files for a new project, including <code>settings.py</code>, <code>spoc.toml</code>, and environment-specific configuration files.</p> <p>Parameters:</p> <ul> <li> <code>settings_text</code>               (<code>str</code>, default:                   <code>SETTINGS_TEXT</code> )           \u2013            <p>The text content for the <code>settings.py</code> file.</p> </li> <li> <code>spoc_text</code>               (<code>str</code>, default:                   <code>SPOC_TEXT</code> )           \u2013            <p>The text content for the <code>spoc.toml</code> file.</p> </li> <li> <code>env_text</code>               (<code>str</code>, default:                   <code>ENV_TEXT</code> )           \u2013            <p>The text content for environment-specific <code>.toml</code> files             (e.g., <code>production.toml</code>, <code>development.toml</code>, <code>staging.toml</code>).</p> </li> </ul>"},{"location":"api/framework/#spoc.Components","title":"<code>spoc.Components(*names)</code>","text":"<p>Framework Components</p> <p>A tool to manage the components.</p> <p>Example:</p> <pre><code>components = spoc.Components(\"model\", \"view\")\n</code></pre>"},{"location":"api/framework/#spoc.Components.add","title":"<code>add(name, metadata=None)</code>","text":"<p>Add a component with the specified name and optional metadata.</p> <p>Example:</p> <pre><code>components = spoc.Components()\ncomponents.add(\"command\", {\"is_click\": True}) # metadata\n</code></pre>"},{"location":"api/framework/#spoc.Components.register","title":"<code>register(name, obj, config=None)</code>","text":"<p>Mark an object as a component optionally using extra configuration settings.</p> <p>Example:</p> <pre><code>components = spoc.Components(\"command\", \"model\")\n\ndef my_obj(): pass\n\ncomponents.register(\"command\", my_obj, config={\"setting\": \"value\"})\n</code></pre>"},{"location":"api/framework/#spoc.Components.is_component","title":"<code>is_component(name, obj)</code>","text":"<p>Validate if the given object is a component with the specified name.</p> <p>Example:</p> <pre><code>components = spoc.Components(\"command\", \"model\")\n\ndef my_obj(): pass\n\nif not components.is_component(\"command\", my_obj):\n    print(\"This is not a valid component.\")\n</code></pre>"},{"location":"api/utils/","title":"API Documentation","text":""},{"location":"api/utils/#other-tools","title":"Other Tools","text":""},{"location":"api/utils/#spoc.frozendict","title":"<code>spoc.frozendict</code>","text":"<p>Immutable Dictionary</p>"},{"location":"api/utils/#spoc.search_object","title":"<code>spoc.search_object(dotted_path)</code>","text":"<p>Search for an <code>object</code> within a module using a dotted path notation.</p> <p>Parameters:</p> <ul> <li> <code>dotted_path</code>               (<code>str</code>)           \u2013            <p>The dotted path string representing the <code>object</code> location.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>The <code>object</code> found at the specified dotted path.</p> </li> </ul> <p>Example:</p> <pre><code>spoc.search_object(\"demo.middleware.on_event\")\n</code></pre>"},{"location":"api/utils/#spoc.get_fields","title":"<code>spoc.get_fields(obj)</code>","text":"<p>Retrieve the non-dunder (non-magic) fields of an object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The object from which to retrieve fields.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>A list of attribute names (fields) that do not start with double underscores (<code>__</code>).</p> </li> </ul>"},{"location":"api/workers/","title":"API Documentation","text":""},{"location":"api/workers/#workers-threads-and-processes","title":"Workers <code>Thread(s)</code> and <code>Process(es)</code>.","text":""},{"location":"api/workers/#spoc.BaseProcess","title":"<code>spoc.BaseProcess(**kwargs)</code>","text":"<p>Abstract Process</p> <p>Example:</p> <pre><code>class AsyncProcess(spoc.BaseProcess):\n    agent: Any = asyncio # Example: `uvloop`\n\n    def before(self) -&gt; None:\n        ... # Set uvloop.EventLoopPolicy()\n\n    async def on_event(self, event_type: str):\n        ...\n\n    async def server(self):\n        while self.active:\n            ...\n\n\nclass SyncProcess(spoc.BaseProcess):\n    def on_event(self, event_type: str):\n        ...\n\n    def server(self):\n        while self.active:\n            ...\n</code></pre>"},{"location":"api/workers/#spoc.BaseThread","title":"<code>spoc.BaseThread(**kwargs)</code>","text":"<p>Abstract Thread</p> <p>Example:</p> <pre><code>class AsyncThread(spoc.BaseThread):\n    agent: Any = asyncio # Example: `uvloop`\n\n    def before(self) -&gt; None:\n        ... # Set uvloop.EventLoopPolicy()\n\n    async def on_event(self, event_type: str):\n        ...\n\n    async def server(self):\n        while self.active:\n            ...\n\n\nclass SyncThread(spoc.BaseThread):\n    def on_event(self, event_type: str):\n        ...\n\n    def server(self):\n        while self.active:\n            ...\n</code></pre>"},{"location":"api/workers/#spoc.BaseServer","title":"<code>spoc.BaseServer</code>","text":"<p>Control multiple workers <code>Thread(s)</code> and/or <code>Process(es)</code>.</p> <p>Example:</p> <pre><code>import time\n\nclass MyProcess(spoc.BaseProcess):  # BaseThread\n    def on_event(self, event_type):\n        print(\"Process | Thread:\", event_type)\n\n    def server(self):\n        while self.active:\n            print(\"My Server\", self.options.name)\n            time.sleep(2)\n\nclass MyServer(spoc.BaseServer):\n    @classmethod  # or staticmethod\n    def on_event(cls, event_type):\n        print(\"Server:\", event_type)\n\n# Press (CTRL + C) to Quit\nMyServer.add(MyProcess(name=\"One\"))\nMyServer.add(MyProcess(name=\"Two\"))\nMyServer.start()\n</code></pre>"},{"location":"api/workers/#spoc.BaseServer.clear","title":"<code>clear()</code>  <code>classmethod</code>","text":"<p>Workers and PIDs cleanup</p>"},{"location":"api/workers/#spoc.BaseServer.exit","title":"<code>exit()</code>  <code>staticmethod</code>","text":"<p>Exit main process</p>"},{"location":"api/workers/#spoc.BaseServer.add","title":"<code>add(*workers)</code>  <code>classmethod</code>","text":"<p>Add worker instances to the service.</p>"},{"location":"api/workers/#spoc.BaseServer.start","title":"<code>start(infinite_loop=True, timeout=5, forced_delay=1)</code>  <code>classmethod</code>","text":"<p>Start all added workers and optionally keep a loop running until interrupted.</p>"},{"location":"api/workers/#spoc.BaseServer.stop","title":"<code>stop(timeout=5, force_stop=False, forced_delay=1)</code>  <code>classmethod</code>","text":"<p>Stop all running workers.</p>"},{"location":"api/workers/#spoc.BaseServer.force_stop","title":"<code>force_stop(delay=1)</code>  <code>classmethod</code>","text":"<p>Force to stop.</p>"},{"location":"getting-started/component/","title":"Component(s)","text":"<p>As you journey into crafting dynamic applications using the S.P.O.C framework, creating custom components is a fundamental skill to master. Components encapsulate discrete units of functionality, promoting modularity, reusability, and maintainability within your project.</p>"},{"location":"getting-started/component/#creating-a-component-decorator","title":"Creating a Component: @Decorator","text":"framework/components.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Components } Read The Docs\"\"\"\n\nfrom typing import Any\nimport functools\nimport spoc\nimport click\n\ncomponents = spoc.Components()\ncomponents.add(\"command\", {\"is_click\": True})\n\ndef command(obj: Any = None, *, group: bool = False):\n    \"\"\"Click Commands and Groups\"\"\"\n    if obj is None:\n        return functools.partial(command, group=group)\n\n    # Real Wrapper (click)\n    obj = click.command(obj) if not group else click.group(obj)\n    components.register(\"command\", obj)\n\n    # Return Modified Class\n    return obj\n</code></pre>"},{"location":"getting-started/component/#using-the-component-command","title":"Using the Component: <code>@command</code>","text":"<p>By marking your function with the <code>@command</code> decorator. This annotation flags the function as a component and registers it for future use.</p> apps/demo/commands.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Commands } Read The Docs\"\"\"\n\nfrom framework import command\nimport click\n\n@command(group=True)\ndef cli():\n    \"Click Group\"\n\n@cli.command()\ndef other_cmd():\n    click.echo(\"Other (Command)\")\n\n@command\ndef hello_world():\n    click.echo(\"Hello World (Command)\")\n</code></pre>"},{"location":"getting-started/framework/","title":"Framework","text":"<p>Creating your framework using the S.P.O.C foundation is an exciting endeavor that empowers you to construct powerful and flexible applications with ease. A framework serves as a structured blueprint that streamlines development, promotes consistency, and accelerates the creation of feature-rich projects.</p> framework/framework.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Framework } Read The Docs\"\"\"\n\nfrom typing import Any\n\nimport click\nimport spoc\n\nTITLE = \"My Project\"\nMODULES = [\"commands\", \"models\", \"views\"]\n\n@click.group()\ndef cli():\n    \"Click Main\"\n\ndef handle_commands(items: list):\n    \"\"\"Collect (Click) Commands\"\"\"\n\n    # INIT Command(s) Sources\n    command_sources = [cli]\n\n    # CLI Banner\n    help_text = f\"\"\"\n    Welcome to { TITLE }\n    \"\"\"\n\n    # Collect All Commands\n    for active in items:\n        if isinstance(active.object, click.core.Group):\n            command_sources.append(active.object)\n        elif isinstance(active.object, click.core.Command):\n            cli.add_command(active.object)\n\n    return click.CommandCollection(name=TITLE, help=help_text, sources=command_sources)\n\n\nclass MyFramework(spoc.Base):\n    \"\"\"My Framework\"\"\"\n\n    components: Any\n    plugins: Any\n\n    def init(self):\n        \"\"\"Class __init__ Replacement\"\"\"\n        framework = spoc.init(MODULES)\n\n        # Parts\n        self.components = framework.components\n        self.plugins = framework.plugins\n\n        # Plugins (Demo)\n        for method in framework.plugins.get(\"on_startup\", []):\n            method()\n\n        # The (CLI) Command-Line Interface\n        self.cli = handle_commands(framework.components.commands.values())\n\n    @staticmethod\n    def keys():\n        return (\"components\", \"plugins\", \"cli\")\n</code></pre>"},{"location":"getting-started/overview/","title":"Getting Started","text":"<p>We\u2019re about to embark on an exciting journey of creating our very first framework from scratch and learning how to effectively use it in real-world applications. In this guide, we'll explore the essential building blocks of a framework, from setting up the project structure to creating components, defining plugins, and configuring settings.</p>"},{"location":"getting-started/overview/#what-youll-learn","title":"What You\u2019ll Learn","text":"<p>By the end of this tutorial, you will:</p> <ol> <li> <p>Understand the Fundamentals of a Framework: Learn what a framework is, why it's useful, and how it differs from a library or a tool. We will cover the core concepts that make a framework powerful, such as modularity, extensibility, and configuration management.</p> </li> <li> <p>Set Up a Robust Project Structure: We\u2019ll guide you through setting up a clear and organized project structure that separates core framework files from application-specific files. This structure will make your framework easy to manage and extend.</p> </li> <li> <p>Create and Manage Components: You\u2019ll learn how to create reusable components within your framework. These components, like commands, models, and views, will form the foundation of your application logic.</p> </li> <li> <p>Implement Plugins for Extensibility: Discover how to use plugins to extend the functionality of your framework. We\u2019ll show you how to define and integrate plugins, allowing your framework to be adaptable to various needs.</p> </li> <li> <p>Configure Your Framework Using Python and TOML: Configuration is key to making your framework flexible. You'll learn to use both Python and TOML for different configuration scenarios, making it easier to switch between development, staging, and production environments.</p> </li> <li> <p>Test and Validate Your Framework: Testing is crucial to ensure your framework works as expected. We\u2019ll cover best practices for testing your components and plugins to catch bugs early and ensure reliability.</p> </li> </ol>"},{"location":"getting-started/overview/#why-build-your-own-framework","title":"Why Build Your Own Framework?","text":"<p>Creating your own framework allows you to tailor its functionality to your specific needs, ensuring it fits perfectly with your development style and the requirements of your projects. It also gives you deeper insight into how frameworks work, enabling you to troubleshoot issues more effectively and innovate with new features that may not be available in existing frameworks.</p>"},{"location":"getting-started/overview/#lets-get-started","title":"Let's Get Started!","text":"<p>We\u2019ll start with the basics and gradually build up to more complex features. No prior experience in building frameworks is needed\u2014just a willingness to learn and a passion for coding. By the end of this guide, you'll not only have a fully functional framework but also a solid understanding of the principles behind it.</p> <p>Ready? Let\u2019s dive in and start building something amazing together!</p>"},{"location":"getting-started/overview/#understanding-the-frameworks-workflow","title":"Understanding the Framework's Workflow","text":"<p>Below is a high-level overview of the workflow in the framework using a flowchart:</p> <pre><code>flowchart LR\n    B{\"Framework\"};\n    B--&gt;C[\"Commands\"];\n    B--&gt;D[\"Models\"];\n    B--&gt;E[\"Views\"];\n\n    C--&gt;F{\"Project\"};\n    D--&gt;F;\n    E--&gt;F;</code></pre>"},{"location":"getting-started/plugins/","title":"Plugin(s)","text":"<p>As you venture further into harnessing the power of the S.P.O.C framework, mastering the creation of extra methods opens doors to extending and customizing your application's capabilities. <code>Plugins</code> are a mechanism for augmenting your framework with additional functionalities beyond the core components.</p> apps/demo/middleware.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Middleware } Read The Docs\"\"\"\n\ndef on_event():\n    print(\"Hello World (Middleware)\")\n</code></pre> <p>config/spoc.toml</p> <p>Remember to register the middleware.</p> config/spoc.toml<pre><code>[spoc]\n# ...\n\n[spoc.plugins]\non_startup = [\"demo.middleware.on_event\"]\n</code></pre>"},{"location":"getting-started/project/","title":"Creating the Project","text":"<p>Let\u2019s set up your project structure. . .</p> <p>These essential folders act as organizational pillars for your project's components, resources, and functionality. They help maintain a logical arrangement, enhance code clarity, and simplify collaboration.</p> <p>Warning</p> <p>In this example, we'll create everything within a single folder for simplicity. However, in a real-world scenario, you'll ideally want to separate your framework and your projects into distinct directories. This approach enhances modularity and makes your codebase easier to manage and maintain.</p>"},{"location":"getting-started/project/#create-the-folders","title":"Create the <code>Folders</code>","text":"mkdir myprojectcd myprojectspoc-initmkdir framework apps apps/demo"},{"location":"getting-started/project/#create-the-files","title":"Create the <code>Files</code>","text":"<p>Let\u2019s set up the demo files</p> touch main.pytouch framework/__init__.pytouch framework/components.pytouch framework/framework.pytouch apps/demo/commands.pytouch apps/demo/models.pytouch apps/demo/views.py"},{"location":"getting-started/project/#project-structure","title":"Project Structure","text":"<pre><code>myproject/               --&gt; Root directory of your project\n|\n|-- config/              --&gt; Directory for configuration files\n|   |-- __init__.py\n|   |-- settings.py      --&gt; Python settings file\n|   |-- spoc.toml        --&gt; TOML configuration file\n|   `-- .env/            --&gt; Directory for environment-specific settings\n|       |-- development.toml\n|       |-- production.toml\n|       `-- staging.toml\n|\n|-- framework/           --&gt; Directory for framework-related files\n|   |-- __init__.py\n|   |-- components.py    --&gt; Framework components file\n|   `-- framework.py     --&gt; Main framework file\n|\n|-- apps/                --&gt; Directory for your application modules\n|   |-- ...\n|   `-- demo/            --&gt; Example module\n|       |-- __init__.py  --&gt; Makes the folder a Python package\n|       |-- commands.py  --&gt; Contains command functions\n|       |-- models.py    --&gt; Contains model definitions\n|       `-- views.py     --&gt; Contains view definitions\n|\n|-- main.py              --&gt; Entry point for the application\n|\n`-- etc...\n</code></pre>"},{"location":"getting-started/project/#configuring-spoc-with-toml","title":"Configuring SPOC with TOML","text":"<p>Define your project settings using a TOML configuration file:</p> myproject/config/spoc.toml<pre><code># Application Configuration\n[spoc]\nmode = \"development\" # options: development, staging, production\ndebug = true\n\n# Installed Apps by Mode\n[spoc.apps]\nproduction = [\"demo\"]\ndevelopment = []\nstaging = []\n\n# Additional Components (Plugins and Hooks)\n[spoc.plugins]\n</code></pre>"},{"location":"getting-started/project/#python-settings-configuration","title":"Python Settings Configuration","text":"<p>Configure settings using a Python file:</p> myproject/config/settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nSettings\n\"\"\"\n\nimport pathlib\n\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n\n# Installed Apps\nINSTALLED_APPS: list  = [\"demo\"]\n\n# Extra Methods\nPLUGINS: dict = {}\n</code></pre>"},{"location":"getting-started/project/#setting-up-the-framework","title":"Setting Up the Framework","text":"FrameworkComponentsInitialization framework/__init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nFramework\n\"\"\"\n\nfrom typing import Any\nimport spoc\n\nMODULES = [\"commands\", \"models\", \"views\"]\n\nclass MyFramework(spoc.Base):\n    \"\"\"My Framework\"\"\"\n\n    components: Any\n    plugins: Any\n\n    def init(self):\n        \"\"\"Class __init__ Replacement\"\"\"\n        app = spoc.init(MODULES)\n\n        # Parts\n        self.components = app.components\n        self.plugins = app.plugins\n\n    @staticmethod\n    def keys():\n        return (\"components\", \"plugins\")\n</code></pre> framework/components.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nComponents\n\"\"\"\n\nfrom typing import Any\nimport spoc\n\ncomponents = spoc.Components()\ncomponents.add(\"view\")\ncomponents.add(\"command\", {\"is_click\": True})\n\n# Define your components.\ndef command(obj: Any = None):\n    \"\"\"Command Component\"\"\"\n    components.register(\"command\", obj)\n    return obj\n\n\ndef view(obj: Any = None):\n    \"\"\"View Component\"\"\"\n    components.register(\"view\", obj)\n    return obj\n</code></pre> framework/__init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nModule Initialization\n\"\"\"\n\nfrom .components import components, command, view\nfrom .framework import MyFramework\n</code></pre>"},{"location":"getting-started/project/#using-the-framework","title":"Using the Framework","text":"apps/demo/commands.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Usage }\"\"\"\n\nfrom framework import command\n\n@command\ndef hello_world():\n    print(\"Hello World (Command)\")\n</code></pre>"},{"location":"getting-started/project/#testing-the-framework","title":"Testing the Framework","text":"main.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Testing } Read The Docs\"\"\"\n\nfrom framework import MyFramework\n\napp = MyFramework()\n\n# Print components groups\nprint(app.components.__dict__.keys())\n\n# Print plugin groups\nprint(app.plugins.keys())\n\n# Execute the registered command\napp.components.commands[\"demo.hello_world\"].object()\n</code></pre> python main.py&gt; dict_keys(['commands', 'models', 'views'])&gt; dict_keys([])&gt; Hello World (Commands)"},{"location":"getting-started/testing/","title":"Testing","text":"<p>The moment has arrived to unveil the results of your hard work and creativity by demoing your first framework.</p> main.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"{ Testing } Read The Docs\"\"\"\n\nfrom framework import MyFramework\n\napp = MyFramework()\n\nif __name__ == \"__main__\":\n    app.cli()\n</code></pre> python main.py hello-world&gt; Hello World (Middleware)&gt; Hello World (Commands)"}]}