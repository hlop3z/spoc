{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to S.P.O.C SPOC aims to be the base for building elastic frameworks . The idea is to create a schema for your project (s) and then build up on that schema . S.P.O.C is the acronym of Single Point of Connections Components To put it in a simple way, SPOC will collect all of the Objects you mark aka: @decorate as a Component (s). example.py @component def hello_world (): print ( \"Hello World\" ) Extras To put it in a simple way, SPOC will collect all of the Extra(s) Objects you list aka: register as a type of Extra (s). spoc.toml [spoc] # ... [spoc.extras] middleware = [ \"demo.middleware.function\" ] # (1) before_server = [ \"demo.middleware.before_server_function\" ] # (2) Extra: of type middleware Extra: of type before_server Spoc WorkFlow sequenceDiagram autonumber Spoc -->> Framework: Create a Framework Spoc -->> Framework: Create a Project Note over Spoc,Framework: Step[1]: Create your Framework's Base Framework -->> Component: Create a Component Note over Component,Framework: Step[2]: Create your Components Component -->> Spoc: Register the Component Note over Spoc,Framework: Step[3]: Loading your Framework Spoc -) Framework: Load the Settings Spoc -) Framework: Load Installed Apps Spoc -) Framework: Load all Extras Spoc -) Framework: Load all Components Note over Spoc,Framework: Finally: Use your Framework","title":"Introduction"},{"location":"#welcome-to-spoc","text":"SPOC aims to be the base for building elastic frameworks . The idea is to create a schema for your project (s) and then build up on that schema . S.P.O.C is the acronym of Single Point of Connections Components To put it in a simple way, SPOC will collect all of the Objects you mark aka: @decorate as a Component (s). example.py @component def hello_world (): print ( \"Hello World\" ) Extras To put it in a simple way, SPOC will collect all of the Extra(s) Objects you list aka: register as a type of Extra (s). spoc.toml [spoc] # ... [spoc.extras] middleware = [ \"demo.middleware.function\" ] # (1) before_server = [ \"demo.middleware.before_server_function\" ] # (2) Extra: of type middleware Extra: of type before_server","title":"Welcome to S.P.O.C"},{"location":"#spoc-workflow","text":"sequenceDiagram autonumber Spoc -->> Framework: Create a Framework Spoc -->> Framework: Create a Project Note over Spoc,Framework: Step[1]: Create your Framework's Base Framework -->> Component: Create a Component Note over Component,Framework: Step[2]: Create your Components Component -->> Spoc: Register the Component Note over Spoc,Framework: Step[3]: Loading your Framework Spoc -) Framework: Load the Settings Spoc -) Framework: Load Installed Apps Spoc -) Framework: Load all Extras Spoc -) Framework: Load all Components Note over Spoc,Framework: Finally: Use your Framework","title":"Spoc WorkFlow"},{"location":"definitions/","text":"API Definitions Global Tools API Description base_dir The base Directory . Path to the project . mode Framework's current mode ( development , production , staging and custom ). config Core ( Settings ) TOML files are loaded here ( spoc.toml , pyproject.toml and {env}.toml ). config['env'] Environment Variables TOML file {env}.toml Options ( development , production , staging ). settings Pythonic ( Settings ) are loaded here ( settings.py ). Example: spoc . settings Core Tools Key Description Variable(s) singleton Tool to create a Singleton Object. (object: class) component Tool to create Component(s) for your Framework . (config: dict, metadata: dict) is_component Tool to verify the Component(s) by adding metadata . (object: any, metadata: dict) Example: spoc . is_component ( hello_world , components [ \"command\" ]) FrameWork Tools Key Description Variable(s) App The Framework . (plugins: list) Example: spoc . App ( plugins = [ \"commands\" ]) Project Tools Key Description component The Components . extras The Internal Methods .","title":"Definitions"},{"location":"definitions/#api-definitions","text":"","title":"API Definitions"},{"location":"definitions/#global-tools","text":"API Description base_dir The base Directory . Path to the project . mode Framework's current mode ( development , production , staging and custom ). config Core ( Settings ) TOML files are loaded here ( spoc.toml , pyproject.toml and {env}.toml ). config['env'] Environment Variables TOML file {env}.toml Options ( development , production , staging ). settings Pythonic ( Settings ) are loaded here ( settings.py ). Example: spoc . settings","title":"Global Tools"},{"location":"definitions/#core-tools","text":"Key Description Variable(s) singleton Tool to create a Singleton Object. (object: class) component Tool to create Component(s) for your Framework . (config: dict, metadata: dict) is_component Tool to verify the Component(s) by adding metadata . (object: any, metadata: dict) Example: spoc . is_component ( hello_world , components [ \"command\" ])","title":"Core Tools"},{"location":"definitions/#framework-tools","text":"Key Description Variable(s) App The Framework . (plugins: list) Example: spoc . App ( plugins = [ \"commands\" ])","title":"FrameWork Tools"},{"location":"definitions/#project-tools","text":"Key Description component The Components . extras The Internal Methods .","title":"Project Tools"},{"location":"getting-started/","text":"Getting Started Framework Let's build our first Framework Imagine you have a folder named apps/ That contains a folder ( module ) named demo/ That contains a file named commands.py That contains a function named test Example: apps/demo/commands.py from framework import commands # (1) @commands def test (): print ( \"Hello World (Commands)\" ) Explained Later ... Then Imagine ... That it also contains a file named middleware.py That contains a function also named test This part you will learn more under Extras Example: apps/demo/middleware.py def test (): print ( \"Hello World (Middleware)\" ) Framework's WorkFlow (Example) flowchart LR B{\"Framework\"}; B-->C[\"Commands\"]; B-->D[\"Models\"]; B-->E[\"Views\"]; C-->F{\"Project\"}; D-->F; E-->F; Create your root folder. For example myproject/ Folder(s) Setup root/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | |-- settings.py --> <File> - Settings { Pythonic } | |-- spoc.toml --> <File> - Settings { TOML } | `-- .env/ --> <Directory> - Settings { Environment Variables } | |-- development.toml | |-- production.toml | `-- staging.toml | |-- framework/ --> <Directory> - Framework Demo | |-- __init__.py | |-- components.py --> <File> - The Framework { Components } | `-- framework.py --> <File> - The { Framework } | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | |-- app_one/ | |-- app_two/ | |-- etc... | `-- demo/ | | | |-- __init__.py --> <File> - Converts { Folder } to Python { Package } | | | |-- commands.py --> <File> - Create Multiple { Commands } Here | | | |-- models.py --> <File> - Create Multiple { Models } Here | | | `-- views.py --> <File> - Create Multiple { Views } Here | |-- main.py --> <File> - Main File | `-- etc... Create files for the Settings . TOML SPOC Settings Lets start by creating the Project Settings . Imagine you have a folder called config/ config/spoc.toml [spoc] mode = \"production\" # development, production, staging, custom # (1) custom_mode = \"development\" [ spoc . apps ] # (2) production = [ \"demo\" ] development = [] staging = [] [spoc.extras] middleware = [ \"demo.middleware.test\" ] # (3) Custom uses settings.py . Apps is where you select the \" Installed Apps \" for each phase of the project . Extras are to create internal tools. Python Settings config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] Create files for the Framework . Setup Framework (Demo) Framework Components Module Demo framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc PLUGINS = [ \"commands\" , \"models\" , \"views\" ] @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # (1) # Core self . base_dir = framework . base_dir self . mode = framework . mode # Settings self . env = framework . config [ \"env\" ] self . pyproject = framework . config [ \"pyproject\" ] self . spoc = framework . config [ \"spoc\" ] self . settings = framework . settings # Project self . component = framework . component # (2) self . extras = framework . extras # (3) # List All Tools (4) self . keys = [ \"base_dir\" , \"mode\" , \"env\" , \"pyproject\" , \"spoc\" , \"settings\" , \"component\" , \"extras\" , ] List : The name of the files you want to find . Component(s) : ( commands | models | views ) will get loaded here Extras : for example ( middleware ) will get loaded here ( Core + Settings + Project ) framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import spoc components = {} components [ \"command\" ] = { \"type\" : \"command\" } # Class @Decorator def commands ( cls : object = None , ): \"\"\"Component Demo\"\"\" my_conf = { \"is_cool\" : True } spoc . component ( cls , config = my_conf , metadata = components [ \"command\" ]) return cls Components Remember I said I'll \" Explained Later \". Here we created a component registration system by using @decorator (s) framework/__init__.py # -*- coding: utf-8 -*- \"\"\"{ Module } Read The Docs\"\"\" from .components import commands , components from .framework import MyFramework Warning The path for this file is \" apps/demo/ \" not \" framework/ \" apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Demo } Read The Docs\"\"\" from framework import commands @commands def hello_world (): print ( \"Hello World (Commands)\" ) Test Framework (Demo) main.py from framework import MyFramework app = MyFramework () app . component . commands [ 'demo.hello_world' ] . object ()","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Framework Let's build our first Framework Imagine you have a folder named apps/ That contains a folder ( module ) named demo/ That contains a file named commands.py That contains a function named test Example: apps/demo/commands.py from framework import commands # (1) @commands def test (): print ( \"Hello World (Commands)\" ) Explained Later ... Then Imagine ... That it also contains a file named middleware.py That contains a function also named test This part you will learn more under Extras Example: apps/demo/middleware.py def test (): print ( \"Hello World (Middleware)\" )","title":"Getting Started"},{"location":"getting-started/#frameworks-workflow-example","text":"flowchart LR B{\"Framework\"}; B-->C[\"Commands\"]; B-->D[\"Models\"]; B-->E[\"Views\"]; C-->F{\"Project\"}; D-->F; E-->F; Create your root folder. For example myproject/","title":"Framework's WorkFlow (Example)"},{"location":"getting-started/#folders-setup","text":"root/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | |-- settings.py --> <File> - Settings { Pythonic } | |-- spoc.toml --> <File> - Settings { TOML } | `-- .env/ --> <Directory> - Settings { Environment Variables } | |-- development.toml | |-- production.toml | `-- staging.toml | |-- framework/ --> <Directory> - Framework Demo | |-- __init__.py | |-- components.py --> <File> - The Framework { Components } | `-- framework.py --> <File> - The { Framework } | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | |-- app_one/ | |-- app_two/ | |-- etc... | `-- demo/ | | | |-- __init__.py --> <File> - Converts { Folder } to Python { Package } | | | |-- commands.py --> <File> - Create Multiple { Commands } Here | | | |-- models.py --> <File> - Create Multiple { Models } Here | | | `-- views.py --> <File> - Create Multiple { Views } Here | |-- main.py --> <File> - Main File | `-- etc... Create files for the Settings .","title":"Folder(s) Setup"},{"location":"getting-started/#toml-spoc","text":"Settings Lets start by creating the Project Settings . Imagine you have a folder called config/ config/spoc.toml [spoc] mode = \"production\" # development, production, staging, custom # (1) custom_mode = \"development\" [ spoc . apps ] # (2) production = [ \"demo\" ] development = [] staging = [] [spoc.extras] middleware = [ \"demo.middleware.test\" ] # (3) Custom uses settings.py . Apps is where you select the \" Installed Apps \" for each phase of the project . Extras are to create internal tools.","title":"TOML SPOC"},{"location":"getting-started/#python-settings","text":"config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] Create files for the Framework .","title":"Python Settings"},{"location":"getting-started/#setup-framework-demo","text":"Framework Components Module Demo framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc PLUGINS = [ \"commands\" , \"models\" , \"views\" ] @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # (1) # Core self . base_dir = framework . base_dir self . mode = framework . mode # Settings self . env = framework . config [ \"env\" ] self . pyproject = framework . config [ \"pyproject\" ] self . spoc = framework . config [ \"spoc\" ] self . settings = framework . settings # Project self . component = framework . component # (2) self . extras = framework . extras # (3) # List All Tools (4) self . keys = [ \"base_dir\" , \"mode\" , \"env\" , \"pyproject\" , \"spoc\" , \"settings\" , \"component\" , \"extras\" , ] List : The name of the files you want to find . Component(s) : ( commands | models | views ) will get loaded here Extras : for example ( middleware ) will get loaded here ( Core + Settings + Project ) framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import spoc components = {} components [ \"command\" ] = { \"type\" : \"command\" } # Class @Decorator def commands ( cls : object = None , ): \"\"\"Component Demo\"\"\" my_conf = { \"is_cool\" : True } spoc . component ( cls , config = my_conf , metadata = components [ \"command\" ]) return cls Components Remember I said I'll \" Explained Later \". Here we created a component registration system by using @decorator (s) framework/__init__.py # -*- coding: utf-8 -*- \"\"\"{ Module } Read The Docs\"\"\" from .components import commands , components from .framework import MyFramework Warning The path for this file is \" apps/demo/ \" not \" framework/ \" apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Demo } Read The Docs\"\"\" from framework import commands @commands def hello_world (): print ( \"Hello World (Commands)\" )","title":"Setup Framework (Demo)"},{"location":"getting-started/#test-framework-demo","text":"main.py from framework import MyFramework app = MyFramework () app . component . commands [ 'demo.hello_world' ] . object ()","title":"Test Framework (Demo)"},{"location":"first-project/component/","text":"Component(s): @Decorator framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import functools import spoc import click components = {} components [ \"commands\" ] = { \"type\" : \"commands\" } # Class @Decorator def commands ( cls : object = None , * , group : bool = False , ): \"\"\"Click { CLI } Creator\"\"\" if cls is None : return functools . partial ( commands , group = group , ) # Real Wrapper cls = click . group ( cls ) if not group : spoc . component ( cls , metadata = components [ \"commands\" ]) return cls Component(s): Commands apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Commands } Read The Docs\"\"\" from framework import commands import click @commands def cli (): \"Click Group\" @cli . command () def hello_world (): \"Hello World (Docs)\" click . echo ( \"Hello World (Commands)\" )","title":"Component(s)"},{"location":"first-project/component/#components-decorator","text":"framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import functools import spoc import click components = {} components [ \"commands\" ] = { \"type\" : \"commands\" } # Class @Decorator def commands ( cls : object = None , * , group : bool = False , ): \"\"\"Click { CLI } Creator\"\"\" if cls is None : return functools . partial ( commands , group = group , ) # Real Wrapper cls = click . group ( cls ) if not group : spoc . component ( cls , metadata = components [ \"commands\" ]) return cls","title":"Component(s): @Decorator"},{"location":"first-project/component/#components-commands","text":"apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Commands } Read The Docs\"\"\" from framework import commands import click @commands def cli (): \"Click Group\" @cli . command () def hello_world (): \"Hello World (Docs)\" click . echo ( \"Hello World (Commands)\" )","title":"Component(s): Commands"},{"location":"first-project/config/","text":"File: settings.py config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] # works only with <mode = \"custom\"> File: spoc.toml config/spoc.toml [spoc] mode = \"development\" # custom # custom_mode = \"development\" # Mode(s) [spoc.apps] production = [] development = [ \"demo\" ] staging = [] [spoc.extras] before_server = [ \"demo.middleware.on_event\" ] File: development.toml config/.env/development.toml [env] DEBUG = \"yes\" SECRET_KEY = \"api-not-secure-key-09d25e094faa6ca2556c\"","title":"Config"},{"location":"first-project/config/#file-settingspy","text":"config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] # works only with <mode = \"custom\">","title":"File: settings.py"},{"location":"first-project/config/#file-spoctoml","text":"config/spoc.toml [spoc] mode = \"development\" # custom # custom_mode = \"development\" # Mode(s) [spoc.apps] production = [] development = [ \"demo\" ] staging = [] [spoc.extras] before_server = [ \"demo.middleware.on_event\" ]","title":"File: spoc.toml"},{"location":"first-project/config/#file-developmenttoml","text":"config/.env/development.toml [env] DEBUG = \"yes\" SECRET_KEY = \"api-not-secure-key-09d25e094faa6ca2556c\"","title":"File: development.toml"},{"location":"first-project/extras/","text":"apps/demo/middleware.py # -*- coding: utf-8 -*- \"\"\" { Middleware } \"\"\" def on_event (): print ( \"Hello World (Middleware)\" ) config/spoc.toml Remember that we registered the middleware earlier. config/spoc.toml [spoc] # ... [spoc.extras] before_server = [ \"demo.middleware.on_event\" ]","title":"Extras"},{"location":"first-project/framework/","text":"framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc import click PLUGINS = [ \"commands\" ] @click . group () def cli (): \"Click Main\" @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # Run Extras before_server = framework . extras [ 'before_server' ] for method in before_server : method () # INIT Command(s) Sources command_sources = [ cli ] # Collect All Commands for active in framework . component . commands . values (): command_sources . append ( active . object ) title = \"My Project\" help_text = f \"\"\" Welcome to { title } \"\"\" self . cli = click . CommandCollection ( name = title , help = help_text , sources = command_sources )","title":"Framework"},{"location":"first-project/overview/","text":"If you have reached this far, it means that you have successfully created your first \" Framework \" but really it doesn't do much. \u00bfOr does it? Now, we will learn how to build something more sophisticated. For example putting together all those commands and using them in an application. flowchart LR B{\"Framework\"}; B-->C[\"Commands\"]; C-->F((\"Project\"));","title":"Overview"},{"location":"first-project/project/","text":"Folder(s) Setup myproject/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | `-- .env/ --> <Directory> - Settings { Environment Variables } | `-- etc | |-- framework/ --> <Directory> - Framework Demo | `-- etc | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | `-- demo/ | `-- etc | |-- main.py --> <File> - Main File | `-- etc...","title":"Project"},{"location":"first-project/project/#folders-setup","text":"myproject/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | `-- .env/ --> <Directory> - Settings { Environment Variables } | `-- etc | |-- framework/ --> <Directory> - Framework Demo | `-- etc | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | `-- demo/ | `-- etc | |-- main.py --> <File> - Main File | `-- etc...","title":"Folder(s) Setup"},{"location":"first-project/testing/","text":"Test Framework (Demo) main.py from framework import MyFramework app = MyFramework () # Run Click app . cli ()","title":"Testing"},{"location":"first-project/testing/#test-framework-demo","text":"main.py from framework import MyFramework app = MyFramework () # Run Click app . cli ()","title":"Test Framework (Demo)"}]}