{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to S.P.O.C SPOC aims to be the base for building elastic frameworks . The idea is to create a schema for your project (s) and then build up on that schema . S.P.O.C is the acronym of Single Point of Connections Components To put it in a simple way, SPOC will collect all of the Objects you mark aka: @decorate as a Component (s). example.py @component def hello_world (): print ( \"Hello World\" ) Extras To put it in a simple way, SPOC will collect all of the Extra(s) Objects you list aka: register as a type of Extra (s). spoc.toml [spoc] # ... [spoc.extras] middleware = [ \"demo.middleware.function\" ] # (1) before_server = [ \"demo.middleware.before_server_function\" ] # (2) Extra: of type middleware Extra: of type before_server Spoc WorkFlow sequenceDiagram autonumber Spoc -->> Framework: Create a Framework Spoc -->> Framework: Create a Project Note over Spoc,Framework: Step[1]: Create your Framework's Base Framework -->> Component: Create a Component Note over Component,Framework: Step[2]: Create your Components Component -->> Spoc: Register the Component Note over Spoc,Framework: Step[3]: Loading your Framework Spoc -) Framework: Load the Settings Spoc -) Framework: Load Installed Apps Spoc -) Framework: Load all Extras Spoc -) Framework: Load all Components Note over Spoc,Framework: Finally: Use your Framework","title":"Introduction"},{"location":"#welcome-to-spoc","text":"SPOC aims to be the base for building elastic frameworks . The idea is to create a schema for your project (s) and then build up on that schema . S.P.O.C is the acronym of Single Point of Connections Components To put it in a simple way, SPOC will collect all of the Objects you mark aka: @decorate as a Component (s). example.py @component def hello_world (): print ( \"Hello World\" ) Extras To put it in a simple way, SPOC will collect all of the Extra(s) Objects you list aka: register as a type of Extra (s). spoc.toml [spoc] # ... [spoc.extras] middleware = [ \"demo.middleware.function\" ] # (1) before_server = [ \"demo.middleware.before_server_function\" ] # (2) Extra: of type middleware Extra: of type before_server","title":"Welcome to S.P.O.C"},{"location":"#spoc-workflow","text":"sequenceDiagram autonumber Spoc -->> Framework: Create a Framework Spoc -->> Framework: Create a Project Note over Spoc,Framework: Step[1]: Create your Framework's Base Framework -->> Component: Create a Component Note over Component,Framework: Step[2]: Create your Components Component -->> Spoc: Register the Component Note over Spoc,Framework: Step[3]: Loading your Framework Spoc -) Framework: Load the Settings Spoc -) Framework: Load Installed Apps Spoc -) Framework: Load all Extras Spoc -) Framework: Load all Components Note over Spoc,Framework: Finally: Use your Framework","title":"Spoc WorkFlow"},{"location":"definitions/","text":"API Definitions Global Tools API Description base_dir The base Directory . Path to the project . mode Framework's current mode ( development , production , staging and custom ). config Core ( Settings ) TOML files are loaded here ( spoc.toml , pyproject.toml and {env}.toml ). config['env'] Environment Variables TOML file {env}.toml Options ( development , production , staging ). settings Pythonic ( Settings ) are loaded here ( settings.py ). Example: spoc . settings Core Tools Key Description Variable(s) singleton Tool to create a Singleton Object. (object: class) component Tool to create Component(s) for your Framework . (config: dict, metadata: dict) is_component Tool to verify the Component(s) by adding metadata . (object: any, metadata: dict) Example: spoc . is_component ( hello_world , components [ \"command\" ]) FrameWork Tools Key Description Variable(s) App The Framework . (plugins: list) Example: spoc . App ( plugins = [ \"commands\" ]) Project Tools Key Description component The Components . extras The Internal Methods .","title":"Definitions"},{"location":"definitions/#api-definitions","text":"","title":"API Definitions"},{"location":"definitions/#global-tools","text":"API Description base_dir The base Directory . Path to the project . mode Framework's current mode ( development , production , staging and custom ). config Core ( Settings ) TOML files are loaded here ( spoc.toml , pyproject.toml and {env}.toml ). config['env'] Environment Variables TOML file {env}.toml Options ( development , production , staging ). settings Pythonic ( Settings ) are loaded here ( settings.py ). Example: spoc . settings","title":"Global Tools"},{"location":"definitions/#core-tools","text":"Key Description Variable(s) singleton Tool to create a Singleton Object. (object: class) component Tool to create Component(s) for your Framework . (config: dict, metadata: dict) is_component Tool to verify the Component(s) by adding metadata . (object: any, metadata: dict) Example: spoc . is_component ( hello_world , components [ \"command\" ])","title":"Core Tools"},{"location":"definitions/#framework-tools","text":"Key Description Variable(s) App The Framework . (plugins: list) Example: spoc . App ( plugins = [ \"commands\" ])","title":"FrameWork Tools"},{"location":"definitions/#project-tools","text":"Key Description component The Components . extras The Internal Methods .","title":"Project Tools"},{"location":"getting-started/","text":"Getting Started Framework Let's build our first Framework Imagine you have a folder named apps/ That contains a folder ( module ) named demo/ That contains a file named commands.py That contains a function named test Example: apps/demo/commands.py from framework import commands # (1) @commands def test (): print ( \"Hello World (Commands)\" ) Explained Later ... Then Imagine ... That it also contains a file named middleware.py That contains a function also named test Example: apps/demo/middleware.py def test (): print ( \"Hello World (Middleware)\" ) Framework's WorkFlow (Example) flowchart LR B{\"Framework\"}; B-->C[\"Commands\"]; B-->D[\"Models\"]; B-->E[\"Views\"]; C-->F{\"Project\"}; D-->F; E-->F; Create your root folder. For example myproject/ Folder(s) Setup root/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | |-- settings.py --> <File> - Settings { Pythonic } | |-- spoc.toml --> <File> - Settings { TOML } | `-- .env/ --> <Directory> - Settings { Environment Variables } | |-- development.toml | |-- production.toml | `-- staging.toml | |-- framework/ --> <Directory> - Framework Demo | |-- __init__.py | |-- components.py --> <File> - The Framework { Components } | `-- framework.py --> <File> - The { Framework } | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | |-- app_one/ | |-- app_two/ | |-- etc... | `-- demo/ | | | |-- __init__.py --> <File> - Converts { Folder } to Python { Package } | | | |-- commands.py --> <File> - Create Multiple { Commands } Here | | | |-- models.py --> <File> - Create Multiple { Models } Here | | | `-- views.py --> <File> - Create Multiple { Views } Here | |-- main.py --> <File> - Main File | `-- etc... Create files for the Settings . TOML SPOC Settings Lets start by creating the Project Settings . Imagine you have a folder called config/ config/spoc.toml [spoc] mode = \"production\" # development, production, staging, custom # (1) custom_mode = \"development\" [ spoc . apps ] # (2) production = [ \"demo\" ] development = [] staging = [] [spoc.extras] middleware = [ \"demo.middleware.test\" ] # (3) Custom uses settings.py . Apps is where you select the \" Installed Apps \" for each phase of the project . Extras are to create internal tools. Python Settings config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] Create files for the Framework . Setup Framework (Demo) Framework Components Module Demo framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc PLUGINS = [ \"commands\" , \"models\" , \"views\" ] @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # (1) # Core self . base_dir = framework . base_dir self . mode = framework . mode # Settings self . env = framework . config [ \"env\" ] self . pyproject = framework . config [ \"pyproject\" ] self . spoc = framework . config [ \"spoc\" ] self . settings = framework . settings # Project self . component = framework . component # (2) self . extras = framework . extras # (3) # List All Tools (4) self . keys = [ \"base_dir\" , \"mode\" , \"env\" , \"pyproject\" , \"spoc\" , \"settings\" , \"component\" , \"extras\" , ] List : The name of the files you want to find . Component(s) : ( commands | models | views ) will get loaded here Extras : for example ( middleware ) will get loaded here ( Core + Settings + Project ) framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import spoc components = {} components [ \"command\" ] = { \"type\" : \"command\" } # Class @Decorator def commands ( cls : object = None , ): \"\"\"Component Demo\"\"\" my_conf = { \"is_cool\" : True } spoc . component ( cls , config = my_conf , metadata = components [ \"command\" ]) return cls Components Remember I said I'll \" Explained Later \". Here we created a component registration system by using @decorator (s) framework/__init__.py # -*- coding: utf-8 -*- \"\"\"{ Module } Read The Docs\"\"\" from .components import commands , components from .framework import MyFramework Warning The path for this file is \" apps/demo/ \" not \" framework/ \" apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Demo } Read The Docs\"\"\" from framework import commands @commands def hello_world (): print ( \"Hello World (Commands)\" ) Test Framework (Demo) main.py from framework import MyFramework import spoc app = MyFramework () app . component . commands [ 'demo.hello_world' ] . object ()","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Framework Let's build our first Framework Imagine you have a folder named apps/ That contains a folder ( module ) named demo/ That contains a file named commands.py That contains a function named test Example: apps/demo/commands.py from framework import commands # (1) @commands def test (): print ( \"Hello World (Commands)\" ) Explained Later ... Then Imagine ... That it also contains a file named middleware.py That contains a function also named test Example: apps/demo/middleware.py def test (): print ( \"Hello World (Middleware)\" )","title":"Getting Started"},{"location":"getting-started/#frameworks-workflow-example","text":"flowchart LR B{\"Framework\"}; B-->C[\"Commands\"]; B-->D[\"Models\"]; B-->E[\"Views\"]; C-->F{\"Project\"}; D-->F; E-->F; Create your root folder. For example myproject/","title":"Framework's WorkFlow (Example)"},{"location":"getting-started/#folders-setup","text":"root/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | |-- settings.py --> <File> - Settings { Pythonic } | |-- spoc.toml --> <File> - Settings { TOML } | `-- .env/ --> <Directory> - Settings { Environment Variables } | |-- development.toml | |-- production.toml | `-- staging.toml | |-- framework/ --> <Directory> - Framework Demo | |-- __init__.py | |-- components.py --> <File> - The Framework { Components } | `-- framework.py --> <File> - The { Framework } | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | |-- app_one/ | |-- app_two/ | |-- etc... | `-- demo/ | | | |-- __init__.py --> <File> - Converts { Folder } to Python { Package } | | | |-- commands.py --> <File> - Create Multiple { Commands } Here | | | |-- models.py --> <File> - Create Multiple { Models } Here | | | `-- views.py --> <File> - Create Multiple { Views } Here | |-- main.py --> <File> - Main File | `-- etc... Create files for the Settings .","title":"Folder(s) Setup"},{"location":"getting-started/#toml-spoc","text":"Settings Lets start by creating the Project Settings . Imagine you have a folder called config/ config/spoc.toml [spoc] mode = \"production\" # development, production, staging, custom # (1) custom_mode = \"development\" [ spoc . apps ] # (2) production = [ \"demo\" ] development = [] staging = [] [spoc.extras] middleware = [ \"demo.middleware.test\" ] # (3) Custom uses settings.py . Apps is where you select the \" Installed Apps \" for each phase of the project . Extras are to create internal tools.","title":"TOML SPOC"},{"location":"getting-started/#python-settings","text":"config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] Create files for the Framework .","title":"Python Settings"},{"location":"getting-started/#setup-framework-demo","text":"Framework Components Module Demo framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc PLUGINS = [ \"commands\" , \"models\" , \"views\" ] @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # (1) # Core self . base_dir = framework . base_dir self . mode = framework . mode # Settings self . env = framework . config [ \"env\" ] self . pyproject = framework . config [ \"pyproject\" ] self . spoc = framework . config [ \"spoc\" ] self . settings = framework . settings # Project self . component = framework . component # (2) self . extras = framework . extras # (3) # List All Tools (4) self . keys = [ \"base_dir\" , \"mode\" , \"env\" , \"pyproject\" , \"spoc\" , \"settings\" , \"component\" , \"extras\" , ] List : The name of the files you want to find . Component(s) : ( commands | models | views ) will get loaded here Extras : for example ( middleware ) will get loaded here ( Core + Settings + Project ) framework/components.py # -*- coding: utf-8 -*- \"\"\"{ Components } Read The Docs\"\"\" import spoc components = {} components [ \"command\" ] = { \"type\" : \"command\" } # Class @Decorator def commands ( cls : object = None , ): \"\"\"Component Demo\"\"\" my_conf = { \"is_cool\" : True } spoc . component ( cls , config = my_conf , metadata = components [ \"command\" ]) return cls Components Remember I said I'll \" Explained Later \". Here we created a component registration system by using @decorator (s) framework/__init__.py # -*- coding: utf-8 -*- \"\"\"{ Module } Read The Docs\"\"\" from .components import commands , components from .framework import MyFramework Warning The path for this file is \" apps/demo/ \" not \" framework/ \" apps/demo/commands.py # -*- coding: utf-8 -*- \"\"\"{ Demo } Read The Docs\"\"\" from framework import commands @commands def hello_world (): print ( \"Hello World (Commands)\" )","title":"Setup Framework (Demo)"},{"location":"getting-started/#test-framework-demo","text":"main.py from framework import MyFramework import spoc app = MyFramework () app . component . commands [ 'demo.hello_world' ] . object ()","title":"Test Framework (Demo)"},{"location":"first-project/0/","text":"Folder(s) Setup myproject/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | `-- .env/ --> <Directory> - Settings { Environment Variables } | `-- etc | |-- framework/ --> <Directory> - Framework Demo | `-- etc | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | `-- demo/ | `-- etc | |-- main.py --> <File> - Main File | `-- etc...","title":"0"},{"location":"first-project/0/#folders-setup","text":"myproject/ --> <Directory> - Project's Root | |-- config/ --> <Directory> - Project's Configurations | `-- .env/ --> <Directory> - Settings { Environment Variables } | `-- etc | |-- framework/ --> <Directory> - Framework Demo | `-- etc | |-- apps/ --> <Directory> - { Apps } in HERE (aka: Py-Packages) | `-- demo/ | `-- etc | |-- main.py --> <File> - Main File | `-- etc...","title":"Folder(s) Setup"},{"location":"first-project/1/","text":"config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] config/spoc.toml [spoc] mode = \"development\" # custom_mode = \"development\" [spoc.apps] production = [] development = [ \"demo\" ] staging = [] [spoc.extras] before_server = [ \"demo.middleware.on_event\" ] config/.env/development.toml [env] DEBUG = \"yes\" SECRET_KEY = \"api-not-secure-key-09d25e094faa6ca2556c\"","title":"1"},{"location":"first-project/2/","text":"framework/framework.py # -*- coding: utf-8 -*- \"\"\"{ Core } Read The Docs\"\"\" import spoc PLUGINS = [ \"commands\" , \"models\" , \"views\" ] @spoc . singleton class MyFramework : \"\"\"Framework\"\"\" def init ( self , ): \"\"\"Class __init__ Replacement\"\"\" framework = spoc . App ( plugins = PLUGINS ) # Collect All Commands commands = {} for method in framework . component . commands . values (): commands [ method . key ] = method . object self . commands = commands # Use \"X\" Command # commands['demo.hello_world']()","title":"2"},{"location":"first-project/3/","text":"","title":"3"},{"location":"first-project/4/","text":"","title":"4"}]}