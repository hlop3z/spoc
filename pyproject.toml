[project]
name = "spoc"
version = "0.1.12"
description = "Framework Builder"
authors = [
    { name = "hlop3z", email = "23062270+hlop3z@users.noreply.github.com" },
]
dependencies = ["toml>=0.10.2"]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }
[project.optional-dependencies]

[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pdm.dev-dependencies]
linters = [
    "isort>=5.10.1",
    "black>=22.6.0",
    "pylint>=2.15.0",
    "bandit>=1.7.4",
    "mypy>=0.991",
    "ssort>=0.11.6",
    "pre-commit",
]
test = [
    "toml",
    "pytest>=7.1.2",
    "pytest-asyncio>=0.19.0",
    "pytest-json-report>=1.5.0",
]
devops = ["click>=8.1.3", "twine>=4.0.1", "watchdog>=2.1.9"]
docs = ["mkdocs>=1.3.1", "mkdocs-material>=8.4.2"]


[tool.pdm.scripts]
# Linters
pre = { shell = "pre-commit run --all-file" }
pylint = "pylint src/ --recursive=y"          #  --output-format=json
bandit = "bandit -r src/"                     #  -f json 
lint = { composite = ["bandit", "pylint"] }
lint-watch = "python scripts/linter.py"

# Docs
docs-dev = { shell = "cd docs/ && python -m mkdocs serve --dev-addr 0.0.0.0:8055" }
docs-gh = { shell = "cd docs/ && python -m mkdocs gh-deploy --force" }

# Tests
test = "python tests/main.py"

# PyPi Upload
pypi = "twine upload dist/*"
